/**
 * This class is generated by jOOQ
 */
package diamond.cms.server.model.jooq.tables;


import diamond.cms.server.model.jooq.Cms;
import diamond.cms.server.model.jooq.Keys;
import diamond.cms.server.model.jooq.tables.records.CCommentRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CComment extends TableImpl<CCommentRecord> {

    private static final long serialVersionUID = -1335219646;

    /**
     * The reference instance of <code>cms.c_comment</code>
     */
    public static final CComment C_COMMENT = new CComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CCommentRecord> getRecordType() {
        return CCommentRecord.class;
    }

    /**
     * The column <code>cms.c_comment.id</code>.
     */
    public final TableField<CCommentRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR.length(40).nullable(false), this, "");

    /**
     * The column <code>cms.c_comment.article_id</code>.
     */
    public final TableField<CCommentRecord, String> ARTICLE_ID = createField("article_id", org.jooq.impl.SQLDataType.VARCHAR.length(40).nullable(false), this, "");

    /**
     * The column <code>cms.c_comment.nickname</code>.
     */
    public final TableField<CCommentRecord, String> NICKNAME = createField("nickname", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>cms.c_comment.email</code>.
     */
    public final TableField<CCommentRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR.length(50).nullable(false), this, "");

    /**
     * The column <code>cms.c_comment.content</code>.
     */
    public final TableField<CCommentRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.VARCHAR.length(512), this, "");

    /**
     * The column <code>cms.c_comment.state</code>. 0: 删除
1: 正常

     */
    public final TableField<CCommentRecord, Integer> STATE = createField("state", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "0: 删除\n1: 正常\n");

    /**
     * The column <code>cms.c_comment.create_time</code>.
     */
    public final TableField<CCommentRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>cms.c_comment.update_time</code>.
     */
    public final TableField<CCommentRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>cms.c_comment.ip</code>.
     */
    public final TableField<CCommentRecord, String> IP = createField("ip", org.jooq.impl.SQLDataType.VARCHAR.length(40).nullable(false), this, "");

    /**
     * The column <code>cms.c_comment.reply_id</code>.
     */
    public final TableField<CCommentRecord, String> REPLY_ID = createField("reply_id", org.jooq.impl.SQLDataType.VARCHAR.length(40), this, "");

    /**
     * The column <code>cms.c_comment.from_author</code>.
     */
    public final TableField<CCommentRecord, Boolean> FROM_AUTHOR = createField("from_author", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * Create a <code>cms.c_comment</code> table reference
     */
    public CComment() {
        this("c_comment", null);
    }

    /**
     * Create an aliased <code>cms.c_comment</code> table reference
     */
    public CComment(String alias) {
        this(alias, C_COMMENT);
    }

    private CComment(String alias, Table<CCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private CComment(String alias, Table<CCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Cms.CMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CCommentRecord> getPrimaryKey() {
        return Keys.KEY_C_COMMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CCommentRecord>> getKeys() {
        return Arrays.<UniqueKey<CCommentRecord>>asList(Keys.KEY_C_COMMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CComment as(String alias) {
        return new CComment(alias, this);
    }

    /**
     * Rename this table
     */
    public CComment rename(String name) {
        return new CComment(name, null);
    }
}
